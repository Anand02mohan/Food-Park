require('../models/database');
const Category = require('../models/Category');
const Recipe = require('../models/Recipe');
const Order = require('../models/Order');
/**
* GET /
* Homepage 
*/
exports.homepage = async(req, res) => {
try {
const limitNumber = 5;
const categories = await Category.find({}).limit(limitNumber);
const latest = await Recipe.find({}).sort({_id: -1}).limit(limitNumber);
const thai = await Recipe.find({ 'category': 'Thai'
}).limit(limitNumber);
const american = await Recipe.find({ 'category': 'American'
}).limit(limitNumber);
const chinese = await Recipe.find({ 'category': 'Chinese'
}).limit(limitNumber);
const food = { latest, thai, american, chinese };

res.render('index', { title: 'Food-Park - Home', categories,food} );
} catch (error) {
res.satus(500).send({message: error.message || "Error Occured" });
}
}
/**
* GET /categories
* Categories 
*/
exports.exploreCategories = async(req, res) => {
try {
const limitNumber = 20;
const categories = await Category.find({}).limit(limitNumber);
res.render('categories', { title: 'Food-Park - Categoreis', categories } 
);
} catch (error) {
res.satus(500).send({message: error.message || "Error Occured" });
}
} 
/**
* GET /categories/:id
* Categories By Id
*/
exports.exploreCategoriesById = async(req, res) => { 
try {
let categoryId = req.params.id;
const limitNumber = 20;
const categoryById = await Recipe.find({ 'category': categoryId
}).limit(limitNumber);
res.render('categories', { title: 'Food-Park - Categoreis', categoryById
} );
} catch (error) {
res.satus(500).send({message: error.message || "Error Occured" });
}
} 
/**
* GET /recipe/:id
* Recipe 
*/
exports.exploreRecipe = async(req, res) => {
try {
let recipeId = req.params.id;
const recipe = await Recipe.findById(recipeId);
res.render('recipe', { title: 'Food-Park - Recipe', recipe } );
} catch (error) {
res.satus(500).send({message: error.message || "Error Occured" });
}
} 
/**
* POST /search
* Search 
*/
exports.searchRecipe = async(req, res) => {
try {
let searchTerm = req.body.searchTerm;
let recipe = await Recipe.find( { $text: { $search: searchTerm, 
$diacriticSensitive: true } });
res.render('search', { title: 'Food-Park - Search', recipe } );
} catch (error) {
res.satus(500).send({message: error.message || "Error Occured" });
}
}
/**
* GET /explore-latest
* Explplore Latest 
*/
exports.exploreLatest = async(req, res) => {
try {
const limitNumber = 20;
const recipe = await Recipe.find({}).sort({ _id: -1
}).limit(limitNumber);
res.render('explore-latest', { title: 'Food-Park - Explore Latest', 
recipe } );
} catch (error) {
res.satus(500).send({message: error.message || "Error Occured" });
}
} 
/**
* GET /explore-random
* Explore Random as JSON
*/
exports.exploreRandom = async(req, res) => {
try {
let count = await Recipe.find().countDocuments();
let random = Math.floor(Math.random() * count);
let recipe = await Recipe.findOne().skip(random).exec();
res.render('explore-random', { title: 'Food-Park - Explore Latest', 
recipe } );
} catch (error) {
res.satus(500).send({message: error.message || "Error Occured" });
}
} 
/**
* GET /submit-recipe
* Submit Recipe
*/
exports.submitRecipe = async(req, res) => {
const infoErrorsObj = req.flash('infoErrors');
const infoSubmitObj = req.flash('infoSubmit');
res.render('submit-recipe', { title: 'Food-Park - Submit Recipe', 
infoErrorsObj, infoSubmitObj } );
}
/**
* POST /submit-recipe
* Submit Recipe
*/
exports.submitRecipeOnPost = async(req, res) => {
try {
let imageUploadFile;
let uploadPath;
let newImageName;
if(!req.files || Object.keys(req.files).length === 0){
console.log('No Files where uploaded.');
} else {
imageUploadFile = req.files.image;
newImageName = Date.now() + imageUploadFile.name;
uploadPath = require('path').resolve('./') + '/public/uploads/' + 
newImageName;
imageUploadFile.mv(uploadPath, function(err){
if(err) return res.satus(500).send(err);
})
}
const newRecipe = new Recipe({
name: req.body.name,
description: req.body.description,

email: req.body.email,
ingredients: req.body.ingredients,
category: req.body.category,
image: newImageName
});
// const newRecipe = new Recipe({
// name: 'New choclate cake',
// description: 'sweet',
// email: 'abc@gmail.com',
// ingredients: 'water',
// category: 'Mexican',
// image: 'buddy-s-crispy-chicken.jpg'
// });
await newRecipe.save();
req.flash('infoSubmit', 'Recipe has been added.')
res.redirect('/submit-recipe');
}catch (error) {
// res.json(error);
req.flash('infoErrors', error);
res.redirect('/submit-recipe');
}
}
/**
* GET /place-order
* Place Order
*/
exports.placeOrder = async(req, res) => {
const infoErrorsObj = req.flash('infoErrors');
const infoSubmitObj = req.flash('infoSubmit');
res.render('place-order', { title: 'Food-Park - Place Order', 
infoErrorsObj, infoSubmitObj } );
}
/**
* POST /place-order
* Place Order
*/
exports.placeOrderOnPost = async(req, res) => {
try {
const newOrder = new Order({
name: req.body.name,
order: req.body.description,
email: req.body.email,

});
await newOrder.save();
req.flash('infoSubmit', 'Your order has been placed. You will be 
further notified through your mail.')
res.redirect('/place-order');
}catch (error) {
// res.json(error);
req.flash('infoErrors', error);
res.redirect('/place-order');
}
}
// //Update Recipe
// async function updateRecipe(){
// try {
// const res = await Recipe.updateOne({ name: 'The ultimate chicken in 
milk' }, { name: 'New dish' });
// res.n; // Number of documents matched
// res.nModified; // Number of documents modified
// } catch (error) {
// console.log(error);
// }
// }
// updateRecipe();
// //Delete Recipe
// async function deleteRecipe(){
// try {
// await Recipe.deleteOne({ name: 'New Pasta' });
// } catch (error) {
// console.log(error);
// }
// }
// deleteRecipe();
